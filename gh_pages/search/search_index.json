{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"dbt-loom","text":"<p><code>dbt-loom</code> is a dbt Core plugin that weaves together multi-project deployments. It works by fetching public model definitions from your dbt artifacts, and injecting those models into your dbt project.</p> <pre><code>flowchart LR\n\n   subgraph TOP[Your Infrastructure]\n    direction TB\n    dbt_runtime[dbt Core]\n    proprietary_plugin[Open Source Metadata Plugin]\n\n    files[Local and Remote Files]\n    object_storage[Object Storage]\n    discovery_api[dbt Cloud APIs]\n\n    discovery_api --&gt; proprietary_plugin\n    files --&gt; proprietary_plugin\n    object_storage --&gt; proprietary_plugin\n    proprietary_plugin --&gt; dbt_runtime\n  end\n\n  Project --&gt; TOP --&gt; Warehouse</code></pre> <p>dbt-loom currently supports obtaining model definitions from:</p> <ul> <li>Local manifest files</li> <li>Remote manifest files via http(s)</li> <li>dbt Cloud</li> <li>GCS</li> <li>S3-compatible object storage services</li> <li>Azure Storage</li> </ul>"},{"location":"#how-does-it-work","title":"How does it work?","text":"<p>As of dbt-core 1.6.0-b8, there now exists a <code>dbtPlugin</code> class which defines functions that can be called by dbt-core's <code>PluginManger</code>. During different parts of the dbt-core lifecycle (such as graph linking and manifest writing), the <code>PluginManger</code> will be called and all plugins registered with the appropriate hook will be executed.</p> <p>dbt-loom implements a <code>get_nodes</code> hook, and uses a configuration file to parse manifests, identify public models, and inject those public models when called by <code>dbt-core</code>.</p>"},{"location":"#known-caveats","title":"Known Caveats","text":"<p>Cross-project dependencies are a relatively new development, and dbt-core plugins are still in beta. As such there are a number of caveats to be aware of when using this tool.</p> <ol> <li>dbt plugins are only supported in dbt-core version 1.6.0-b8 and newer. This means you must be using a dbt adapter    compatible with this version.</li> <li><code>PluginNodeArgs</code> are not fully-realized dbt <code>ManifestNode</code>s, so documentation generated by <code>dbt docs generate</code> may    be sparse when viewing injected models.</li> </ol>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>The dbt-loom community exists to provide a free, unencumbered, and vendor-agnostic means of enabling multi-project deployments of dbt-core. We accept that for this project to be successful, we must create a community that is open, curious, and accepting of each others differences.</p> <p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity and orientation, or employer.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals or for specific   corporate interests, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at yager@nicholasyager.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to dbt-loom","text":"<p>Thank you for taking the time to contribute! \ud83c\udf89\ud83d\udc83</p> <p>The following is a set of guidelines for contributing to dbt-loom. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request.</p>"},{"location":"CONTRIBUTING/#how-can-i-contribute","title":"How Can I Contribute?","text":""},{"location":"CONTRIBUTING/#reporting-bugs","title":"Reporting Bugs","text":"<p>If you find a bug, please report it by opening an issue on GitHub. Make sure to include:</p> <ul> <li>A clear and descriptive title.</li> <li>Steps to reproduce the problem.</li> <li>Expected behavior.</li> <li>Actual behavior.</li> <li>Any relevant logs or screenshots.</li> </ul>"},{"location":"CONTRIBUTING/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>If you have an idea to enhance dbt-loom, we'd love to hear about it! Please open an issue on GitHub and include:</p> <ul> <li>A clear and descriptive title.</li> <li>A detailed description of the proposed enhancement.</li> <li>Any relevant use cases or examples.</li> </ul>"},{"location":"CONTRIBUTING/#pull-requests","title":"Pull Requests","text":"<p>When you're ready to start working on an issue, fork the repository and create a new branch for your work. Follow these steps:</p> <ol> <li>Fork the repository and clone your fork.</li> <li>Create a new branch: <code>git checkout -b feature/my-feature-branch</code>.</li> <li>Make your changes and commit them: <code>git commit -m 'Add some feature'</code>.</li> <li>Push to the branch: <code>git push origin feature/my-feature-branch</code>.</li> <li>Open a pull request.</li> </ol> <p>After creating the pull request, the PR will automatically notify the maintainers, and they will be able to trigger CI checks for your change.</p>"},{"location":"CONTRIBUTING/#code-style","title":"Code Style","text":"<ul> <li>Follow the existing code style.</li> <li>Ensure your code passes all tests, including mypy.</li> <li>Write tests for your code if applicable.</li> </ul>"},{"location":"CONTRIBUTING/#running-tests","title":"Running Tests","text":"<p>Make sure all tests pass before submitting a pull request. You can run the tests with:</p> <pre><code>pytest tests/\n</code></pre>"},{"location":"CONTRIBUTING/#documentation","title":"Documentation","text":"<p>Contributions to documentation are always welcome. If you see something that can be improved or needs clarification, feel free to make changes.</p>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>This project adheres to the Contributor Covenant Code of Conduct. By participating, you are expected to uphold this code.</p>"},{"location":"CONTRIBUTING/#getting-help","title":"Getting Help","text":"<p>If you need help or have any questions, feel free to open an issue on GitHub.</p> <p>Thank you for contributing!</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>To begin, install the <code>dbt-loom</code> python package.</p> <pre><code>pip install dbt-loom\n</code></pre> <p>Next, create a <code>dbt-loom</code> configuration file. This configuration file provides the paths for your upstream project's manifest files.</p> <pre><code>manifests:\n  - name: project_name # This should match the project's real name\n    type: file\n    config:\n      # A path to your manifest. This can be either a local path, or a remote\n      # path accessible via http(s).\n      path: path/to/manifest.json\n</code></pre> <p>By default, <code>dbt-loom</code> will look for <code>dbt_loom.config.yml</code> in your working directory. You can also set the <code>DBT_LOOM_CONFIG</code> environment variable.</p>"},{"location":"getting-started/#using-dbt-cloud-as-an-artifact-source","title":"Using dbt Cloud as an artifact source","text":"<p>You can use dbt-loom to fetch model definitions from dbt Cloud by setting up a <code>dbt-cloud</code> manifest in your <code>dbt-loom</code> config, and setting the <code>DBT_CLOUD_API_TOKEN</code> environment variable in your execution environment.</p> <pre><code>manifests:\n  - name: project_name\n    type: dbt_cloud\n    config:\n      account_id: &lt;YOUR DBT CLOUD ACCOUNT ID&gt;\n\n      # Job ID pertains to the job that you'd like to fetch artifacts from.\n      job_id: &lt;REFERENCE JOB ID&gt;\n\n      api_endpoint: &lt;DBT CLOUD ENDPOINT&gt;\n      # dbt Cloud has multiple regions with different URLs. Update this to\n      # your appropriate dbt cloud endpoint.\n\n      step_id: &lt;JOB STEP&gt;\n      # If your job generates multiple artifacts, you can set the step from\n      # which to fetch artifacts. Defaults to the last step.\n</code></pre>"},{"location":"getting-started/#using-an-s3-compatible-object-store-as-an-artifact-source","title":"Using an S3-compatible object store as an artifact source","text":"<p>You can use dbt-loom to fetch manifest files from S3-compatible object stores by setting up ab <code>s3</code> manifest in your <code>dbt-loom</code> config. Please note that this approach supports all standard boto3-compatible environment variables and authentication mechanisms. Please see the boto3 documentation for more details.</p> <pre><code>manifests:\n  - name: project_name\n    type: s3\n    config:\n      bucket_name: &lt;YOUR S3 BUCKET NAME&gt;\n      # The name of the bucket where your manifest is stored.\n\n      object_name: &lt;YOUR OBJECT NAME&gt;\n      # The object name of your manifest file.\n</code></pre>"},{"location":"getting-started/#using-gcs-as-an-artifact-source","title":"Using GCS as an artifact source","text":"<p>You can use dbt-loom to fetch manifest files from Google Cloud Storage by setting up a <code>gcs</code> manifest in your <code>dbt-loom</code> config.</p> <pre><code>manifests:\n  - name: project_name\n    type: gcs\n    config:\n      project_id: &lt;YOUR GCP PROJECT ID&gt;\n      # The alphanumeric ID of the GCP project that contains your target bucket.\n\n      bucket_name: &lt;YOUR GCS BUCKET NAME&gt;\n      # The name of the bucket where your manifest is stored.\n\n      object_name: &lt;YOUR OBJECT NAME&gt;\n      # The object name of your manifest file.\n\n      credentials: &lt;PATH TO YOUR SERVICE ACCOUNT JSON CREDENTIALS&gt;\n      # The OAuth2 Credentials to use. If not passed, falls back to the default inferred from the environment.\n</code></pre>"},{"location":"getting-started/#using-azure-storage-as-an-artifact-source","title":"Using Azure Storage as an artifact source","text":"<p>You can use dbt-loom to fetch manifest files from Azure Storage by setting up an <code>azure</code> manifest in your <code>dbt-loom</code> config. The <code>azure</code> type implements the DefaultAzureCredential class, supporting all environment variables and authentication mechanisms. Alternatively, set the <code>AZURE_STORAGE_CONNECTION_STRING</code> environment variable to authenticate via a connection string.</p> <pre><code>manifests:\n  - name: project_name\n    type: azure\n    config:\n      account_name: &lt;YOUR AZURE STORAGE ACCOUNT NAME&gt; # The name of your Azure Storage account\n      container_name: &lt;YOUR AZURE STORAGE CONTAINER NAME&gt; # The name of your Azure Storage container\n      object_name: &lt;YOUR OBJECT NAME&gt; # The object name of your manifest file.\n</code></pre>"},{"location":"getting-started/#using-environment-variables","title":"Using environment variables","text":"<p>You can easily incorporate your own environment variables into the config file. This allows for dynamic configuration values that can change based on the environment. To specify an environment variable in the <code>dbt-loom</code> config file, use one of the following formats:</p> <p><code>${ENV_VAR}</code> or <code>$ENV_VAR</code></p>"},{"location":"getting-started/#example","title":"Example:","text":"<pre><code>manifests:\n  - name: revenue\n    type: gcs\n    config:\n      project_id: ${GCP_PROJECT}\n      bucket_name: ${GCP_BUCKET}\n      object_name: ${MANIFEST_PATH}\n</code></pre>"},{"location":"getting-started/#gzipped-files","title":"Gzipped files","text":"<p><code>dbt-loom</code> natively supports decompressing gzipped manifest files. This is useful to reduce object storage size and to minimize loading times when reading manifests from object storage. Compressed file detection is triggered when the file path for the manifest is suffixed with <code>.gz</code>.</p> <pre><code>manifests:\n  - name: revenue\n    type: s3\n    config:\n      bucket_name: example_bucket_name\n      object_name: manifest.json.gz\n</code></pre>"}]}